# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow checks out code, performs a Codacy security scan
# and integrates the results with the
# GitHub Advanced Security code scanning feature.  For more information on
# the Codacy security scan action usage and parameters, see
# https://github.com/codacy/codacy-analysis-cli-action.
# For more information on Codacy Analysis CLI in general, see
# https://github.com/codacy/codacy-analysis-cli.

name: Codacy Security Scan

on: ["push"]
# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     # The branches below must be a subset of the branches above
#     branches: [ "main" ]

permissions:
  contents: read

jobs:
  codacy-security-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v4

      # Run Codacy Analysis CLI and generate SARIF output
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          gh-code-scanning-compat: true
          # Setting a large value for max-allowed-issues to prevent job failure on a large number of issues
          max-allowed-issues: 2147483647

      # Upload Codacy SARIF results
      - name: Upload Codacy SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      # Run ESLint and generate SARIF output
      - name: Run ESLint
        run: |
          cd backend
          npm install
          npx eslint --config ../.eslintrc.json -f eslint-formatter-sarif -o eslint-results.sarif .

      # Upload ESLint SARIF results
      - name: Upload ESLint SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif

      # Run Trivy and generate SARIF output
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@v0.0.10
        with:
          image-ref: "./"
          format: sarif
          output: trivy-results.sarif

      # Upload Trivy SARIF results
      - name: Upload Trivy SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
